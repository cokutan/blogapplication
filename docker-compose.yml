version: '3.8'
services:
  configservice:
    build: configserver
    container_name: 'configservice'
    restart: "unless-stopped"
    ports:
      - '8088:8088'
    environment:
      - SPRING_PROFILES_ACTIVE=native
      - DISCOVERY_SERVICE_HOST=discoveryservice
    healthcheck:
      test: curl --fail http://localhost:8088/blogapp/native  || exit 1
      interval: 1m
      timeout: 30s
      retries: 3
    networks:
      - gateway
  discoveryservice:
    build: discoveryservice
    container_name: 'discoveryservice'
    restart: "unless-stopped"
    ports:
      - '8761:8761'
    depends_on:
      configservice:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=native
      - CONFIG_SERVICE_HOST=configservice
    healthcheck:
      test: curl --fail http://localhost:8761/eureka/v2/apps || exit 1
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - gateway
  blogapp:
    build: blogapp
    container_name: 'blogapp'
    restart: "unless-stopped"
    ports:
      - '9009:9009'
    networks:
      - mysql-network
      - opensearch-net
      - gateway
      - keycloak
    depends_on:
      db:
        condition: service_healthy
      opensearch-node1:
        condition: service_healthy
      discoveryservice:
        condition: service_healthy
      configservice:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://localhost:9009  || exit 1
      interval: 30s
      timeout: 30s
      retries: 3
    environment:
      - SPRING_PROFILES_ACTIVE=native
      - ELASTIC_HOST=opensearch-node1
      - MYSQL_HOST=db
      - MYSQL_PORT=3306
      - CONFIG_SERVICE_HOST=configservice
      - SPRING_APPLICATION_JSON={"eureka":{"client":{"serviceUrl":{"defaultZone":"http://discoveryservice:8761/eureka"}}}}
  blogapp-webflux:
    build: blogapp-webflux
    container_name: 'blogapp-webflux'
    restart: "unless-stopped"
    ports:
      - '9560:9560'
    networks:
      - mysql-network
      - keycloak
      - gateway
    depends_on:
      db:
        condition: service_healthy
      discoveryservice:
        condition: service_healthy
      configservice:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=native
      - MYSQL_HOST=db
      - MYSQL_PORT=3306
      - CONFIG_SERVICE_HOST=configservice
      - SPRING_APPLICATION_JSON={"eureka":{"client":{"serviceUrl":{"defaultZone":"http://discoveryservice:8761/eureka"}}}}
  blogapp-usermanagement:
    build: blogapp-usermanagement
    container_name: 'blogapp-usermanagement'
    restart: "unless-stopped"
    ports:
      - '9010:9010'
    networks:
      - mysql-network
      - gateway
      - keycloak
    depends_on:
      db:
        condition: service_healthy
      discoveryservice:
        condition: service_healthy
      configservice:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=native
      - MYSQL_HOST=db
      - MYSQL_PORT=3306
      - CONFIG_SERVICE_HOST=configservice
      - SPRING_APPLICATION_JSON={"eureka":{"client":{"serviceUrl":{"defaultZone":"http://discoveryservice:8761/eureka"}}}}
  gatewayservice:
    build: gatewayservice
    container_name: 'gatewayservice'
    restart: "unless-stopped"
    networks:
      - keycloak
      - gateway
    ports:
      - '8082:8082'
    environment:
      - SPRING_PROFILES_ACTIVE=native
      - CONFIG_SERVICE_HOST=configservice
      - BLOG_OPERATIONS_HOST=blogapp
      - USER_OPERATIONS_HOST=blogapp-usermanagement
      - SPRING_APPLICATION_JSON={"eureka":{"client":{"serviceUrl":{"defaultZone":"http://discoveryservice:8761/eureka"}}}}
    depends_on:
      discoveryservice:
        condition: service_healthy
      blogapp:
        condition: service_started
      blogapp-webflux:
        condition: service_started
      blogapp-usermanagement:
        condition: service_started
  opensearch-node1: # This is also the hostname of the container within the Docker network (i.e. https://opensearch-node1/)
    image: opensearchproject/opensearch:latest # Specifying the latest available image - modify if you want a specific version
    container_name: opensearch-node1
    restart: "unless-stopped"
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - "DISABLE_SECURITY_PLUGIN=true"
    ulimits:
      memlock:
        soft: -1 # Set memlock to unlimited (no soft or hard limit)
        hard: -1
      nofile:
        soft: 65536 # Maximum number of open files for the opensearch user - set to at least 65536
        hard: 65536
    volumes:
      - opensearch-data1:/usr/share/opensearch/data # Creates volume called opensearch-data1 and mounts it to the container
    ports:
      - 9200:9200 # REST API
      - 9600:9600 # Performance Analyzer
    healthcheck:
      test: [ "CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1" ]
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - opensearch-net # All of the containers will join the same Docker bridge network
  db:
    image: mysql
    restart: "unless-stopped"
    environment:
      MYSQL_DATABASE: 'blogapp'
      # So you don't have to use root, but you can if you like
      MYSQL_USER: 'cokutan'
      # You can use whatever password you like
      MYSQL_PASSWORD: '123456'
      # Password for root access
      MYSQL_ROOT_PASSWORD: 'password'
      # MYSQL_ROOT_HOST: '%'
    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - '3307:3306'
      # Where our data will be persisted
    volumes:
      - my-db:/var/lib/mysql
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin -h 'localhost' -u root -ppassword ping --silent" ]
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - mysql-network
    # command: --default-authentication-plugin=mysql_native_password
  keycloak:
    image: jboss/keycloak
    container_name: keycloak
    volumes:
      - ./imports/blogapp-keycloakrealm.json:/opt/jboss/keycloak/imports/blogapp-keycloakrealm.json
    # command: not needed anymore
    #  - "-b 0.0.0.0 -Dkeycloak.import=/opt/jboss/keycloak/imports/realm-export.json"
    environment:
      KEYCLOAK_IMPORT: /opt/jboss/keycloak/imports/blogapp-keycloakrealm.json
      KEYCLOAK_USER: spring
      KEYCLOAK_PASSWORD: spring123
      KEYCLOAK_LOGLEVEL: DEBUG
    restart: "unless-stopped"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/auth/" ]
      interval: 1m
      timeout: 30s
      retries: 3
    networks:
      keycloak:
        aliases:
          - keycloak.docker.internal
    ports:
      - 8080:8080
  # Names our volume
  sonarqube:
    image: sonarqube:latest
    ports:
      - 9000:9000
    networks:
      - sonarnet
volumes:
  my-db:
  opensearch-data1:
networks:
  mysql-network:
  opensearch-net:
  keycloak:
  sonarnet:
  gateway: