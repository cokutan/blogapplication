version: '3.8'
services:
  configservice:
    build: configserver
    container_name: 'configservice'
    restart: "unless-stopped"
    ports:
      - '8088:8088'
    environment:
      - SPRING_PROFILES_ACTIVE=native
      - DISCOVERY_SERVICE_HOST=discoveryservice
    healthcheck:
      test: curl --fail http://localhost:8088/blogapp/native  || exit 1
      interval: 1m
      timeout: 30s
      retries: 3
    networks:
      - gateway
  discoveryservice:
    build: discoveryservice
    container_name: 'discoveryservice'
    restart: "unless-stopped"
    ports:
      - '8761:8761'
    depends_on:
      configservice:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=native
      - CONFIG_SERVICE_HOST=configservice
    healthcheck:
      test: curl --fail http://localhost:8761/eureka/v2/apps || exit 1
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - gateway
  blogapp:
    build: blogapp
    container_name: 'blogapp'
    restart: "unless-stopped"
    ports:
      - '9009:9009'
    networks:
      - mongodb-network
      - opensearch-net
      - gateway
      - keycloak
    depends_on:
      mongodb:
        condition: service_healthy
      opensearch-node1:
        condition: service_healthy
      discoveryservice:
        condition: service_healthy
      configservice:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://localhost:9009  || exit 1
      interval: 30s
      timeout: 30s
      retries: 3
    environment:
      - SPRING_PROFILES_ACTIVE=native
      - ELASTIC_HOST=opensearch-node1
      - CONFIG_SERVICE_HOST=configservice
      - SPRING_KAFKA_BOOTSTRAP-SERVERS= kafka1:29092, kafka2:29092, kafka3:29092
      - SPRING_APPLICATION_JSON={"eureka":{"client":{"serviceUrl":{"defaultZone":"http://discoveryservice:8761/eureka"}}}}
  blogapp-webflux:
    build: blogapp-webflux
    container_name: 'blogapp-webflux'
    restart: "unless-stopped"
    ports:
      - '9560:9560'
    networks:
      - mongodb-network
      - keycloak
      - gateway
    depends_on:
      mongodb:
        condition: service_healthy
      discoveryservice:
        condition: service_healthy
      configservice:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=native
      - CONFIG_SERVICE_HOST=configservice
      - SPRING_APPLICATION_JSON={"eureka":{"client":{"serviceUrl":{"defaultZone":"http://discoveryservice:8761/eureka"}}}}
  blogapp-usermanagement:
    build: blogapp-usermanagement
    container_name: 'blogapp-usermanagement'
    restart: "unless-stopped"
    ports:
      - '9010:9010'
    networks:
      - mongodb-network
      - gateway
      - keycloak
    depends_on:
      mongodb:
        condition: service_healthy
      discoveryservice:
        condition: service_healthy
      configservice:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=native
      - CONFIG_SERVICE_HOST=configservice
      - SPRING_APPLICATION_JSON={"eureka":{"client":{"serviceUrl":{"defaultZone":"http://discoveryservice:8761/eureka"}}}}
  gatewayservice:
    build: gatewayservice
    container_name: 'gatewayservice'
    restart: "unless-stopped"
    networks:
      - keycloak
      - gateway
    ports:
      - '8082:8082'
    environment:
      - SPRING_PROFILES_ACTIVE=native
      - CONFIG_SERVICE_HOST=configservice
      - BLOG_OPERATIONS_HOST=blogapp
      - USER_OPERATIONS_HOST=blogapp-usermanagement
      - SPRING_APPLICATION_JSON={"eureka":{"client":{"serviceUrl":{"defaultZone":"http://discoveryservice:8761/eureka"}}}}
    depends_on:
      discoveryservice:
        condition: service_healthy
      blogapp:
        condition: service_started
      blogapp-webflux:
        condition: service_started
      blogapp-usermanagement:
        condition: service_started
  opensearch-node1: # This is also the hostname of the container within the Docker network (i.e. https://opensearch-node1/)
    image: opensearchproject/opensearch:latest # Specifying the latest available image - modify if you want a specific version
    container_name: opensearch-node1
    restart: "unless-stopped"
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - "DISABLE_SECURITY_PLUGIN=true"
    ulimits:
      memlock:
        soft: -1 # Set memlock to unlimited (no soft or hard limit)
        hard: -1
      nofile:
        soft: 65536 # Maximum number of open files for the opensearch user - set to at least 65536
        hard: 65536
    volumes:
      - opensearch-data1:/usr/share/opensearch/data # Creates volume called opensearch-data1 and mounts it to the container
    ports:
      - 9200:9200 # REST API
      - 9600:9600 # Performance Analyzer
    healthcheck:
      test: [ "CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1" ]
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - opensearch-net # All of the containers will join the same Docker bridge network
  mongodb:
    image: mongo
    ports:
      - '27017:27017'
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=root
      - MONGO_INITDB_DATABASE=blogapp
    volumes:
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/productiondb --quiet
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      mongodb-network:
        aliases:
          - mongodb.docker.internal
  keycloak:
    image: jboss/keycloak
    container_name: keycloak
    volumes:
      - ./imports/blogapp-keycloakrealm.json:/opt/jboss/keycloak/imports/blogapp-keycloakrealm.json
    # command: not needed anymore
    #  - "-b 0.0.0.0 -Dkeycloak.import=/opt/jboss/keycloak/imports/realm-export.json"
    environment:
      KEYCLOAK_IMPORT: /opt/jboss/keycloak/imports/blogapp-keycloakrealm.json
      KEYCLOAK_USER: spring
      KEYCLOAK_PASSWORD: spring123
      KEYCLOAK_LOGLEVEL: DEBUG
    restart: "unless-stopped"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/auth/" ]
      interval: 1m
      timeout: 30s
      retries: 3
    networks:
      keycloak:
        aliases:
          - keycloak.docker.internal
    ports:
      - 8080:8080
  kafka1:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka1
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: INTERNAL://kafka1:29092,CONTROLLER://kafka1:29093,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:29092,EXTERNAL://localhost:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:29093,2@kafka2:29093,3@kafka3:29093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL'
      CLUSTER_ID : 'q1Sh-9_ISia_zwGINzRvyQ'
    networks:
      kafka-network:
  kafka2:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka2
    ports:
      - "9093:9093"
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: INTERNAL://kafka2:29092,CONTROLLER://kafka2:29093,EXTERNAL://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:29092,EXTERNAL://localhost:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:29093,2@kafka2:29093,3@kafka3:29093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL'
      CLUSTER_ID : 'q1Sh-9_ISia_zwGINzRvyQ'
    networks:
      kafka-network:
  kafka3:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka3
    ports:
      - "9094:9094"
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: INTERNAL://kafka3:29092,CONTROLLER://kafka3:29093,EXTERNAL://0.0.0.0:9094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka3:29092,EXTERNAL://localhost:9094
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:29093,2@kafka2:29093,3@kafka3:29093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL'
      CLUSTER_ID : 'q1Sh-9_ISia_zwGINzRvyQ'
    networks:
      kafka-network:
  # Names our volume
volumes:
  dbdata:
  opensearch-data1:
networks:
  mongodb-network:
  opensearch-net:
  keycloak:
  gateway:
  kafka-network: